{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://heim-j-hw3/./src/utils.ts","webpack://heim-j-hw3/./src/enums/audio-defaults.enum.ts","webpack://heim-j-hw3/./src/audio.ts","webpack://heim-j-hw3/./src/visualizer.ts","webpack://heim-j-hw3/./src/enums/main-defaults.enum.ts","webpack://heim-j-hw3/./src/classes/Triangles.ts","webpack://heim-j-hw3/./src/classes/Fireworks.ts","webpack://heim-j-hw3/./src/interfaces/drawParams.interface.ts","webpack://heim-j-hw3/./src/main.ts","webpack://heim-j-hw3/./src/load-json.ts","webpack://heim-j-hw3/./src/burger.ts","webpack://heim-j-hw3/./src/loader.ts"],"sourcesContent":["const makeColor = (red: number, green: number, blue: number, alpha: number = 1) => {\r\n  return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n\r\nconst getRandom = (min: number, max: number) => {\r\n  return Math.random() * (max - min) + min;\r\n};\r\n\r\nconst getRandomColor = () => {\r\n  const floor = 35; // so that colors are not too bright or too dark \r\n  const getByte = () => getRandom(floor, 255 - floor);\r\n  return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n\r\nconst makeLine = (ctx: CanvasRenderingContext2D, x: number, y: number, audioData: Uint8Array, canvasWidth: number) => {\r\n  ctx.beginPath();\r\n  ctx.moveTo(x, y);\r\n  for (let i = 0; i < audioData.length; i++) {\r\n    const value = audioData[i];\r\n    ctx.lineTo(x, y - value);\r\n    x += (canvasWidth / (audioData.length - 50));\r\n  }\r\n  ctx.stroke();\r\n  ctx.closePath();\r\n  ctx.restore();\r\n}\r\n\r\nconst makeCircle = (ctx: CanvasRenderingContext2D, x: number, y: number, percent: number, radius: number) => {\r\n  ctx.beginPath();\r\n  ctx.fillStyle = makeColor(105, 4, 58, .5 - percent / 5);\r\n  ctx.arc(x, y, radius * percent, 0, 2 * Math.PI, false);\r\n  ctx.fill();\r\n  ctx.closePath();\r\n\r\n}\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\nconst goFullscreen = (element) => {\r\n  if (element.requestFullscreen) {\r\n    element.requestFullscreen();\r\n  } else if (element.mozRequestFullscreen) {\r\n    element.mozRequestFullscreen();\r\n  } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\r\n    element.mozRequestFullScreen();\r\n  } else if (element.webkitRequestFullscreen) {\r\n    element.webkitRequestFullscreen();\r\n  }\r\n  // .. and do nothing if the method is not supported\r\n};\r\n\r\nexport { makeColor, getRandom, getRandomColor, goFullscreen, makeLine, makeCircle };","export enum DEFAULTS {\r\n    gain = .5,\r\n    numSamples = 256\r\n}\r\n\r\n","// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\nlet audioCtx: AudioContext;\r\n\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\nlet element: HTMLAudioElement;\r\nlet sourceNode: AudioNode;\r\nlet analyserNode: AnalyserNode;\r\nlet gainNode: GainNode;\r\nlet distortionFilter: WaveShaperNode;\r\nlet highBiquadFilter: BiquadFilterNode;\r\nlet lowBiquadFilter: BiquadFilterNode;\r\n\r\n//real enum\r\nimport { DEFAULTS } from './enums/audio-defaults.enum';\r\n\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\nconst setupWebaudio = (filePath: string) => {\r\n    // 1 - The || is because WebAudio has not been standardized across browsers yet\r\n    const AudioContext = window.AudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n    // 2 - this creates an <audio> element\r\n    element = new Audio();\r\n\r\n    // 3 - have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n    // 4 - create an a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // 5 - create an analyser node\r\n    // note the UK spelling of \"Analyser\"\r\n    analyserNode = audioCtx.createAnalyser();\r\n\r\n    // fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n    // 7 - create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    //create filters and distortion\r\n    highBiquadFilter = audioCtx.createBiquadFilter();\r\n    highBiquadFilter.type = \"highshelf\";\r\n\r\n    lowBiquadFilter = audioCtx.createBiquadFilter();\r\n    lowBiquadFilter.type = \"lowshelf\";\r\n\r\n    distortionFilter = audioCtx.createWaveShaper();\r\n    //distortionFilter.type = \"distortion\";\r\n\r\n\r\n    // 8 - connect the nodes - we now have an audio graph\r\n    sourceNode.connect(gainNode);\r\n    gainNode.connect(highBiquadFilter);\r\n    highBiquadFilter.connect(lowBiquadFilter);\r\n    lowBiquadFilter.connect(distortionFilter);\r\n    distortionFilter.connect(analyserNode);\r\n\r\n    //connect to destination\r\n    analyserNode.connect(audioCtx.destination);\r\n}\r\n\r\n//load\r\nconst loadSoundFile = (filePath: string) => {\r\n    element.src = filePath;\r\n}\r\n\r\n//play\r\nconst playCurrentSound = () => {\r\n    element.play();\r\n}\r\n\r\n//pause\r\nconst pauseCurrentSound = () => {\r\n    element.pause();\r\n}\r\n\r\n//volume change\r\nconst setVolume = (value: number) => {\r\n    // make sure that it's a Number rather than a String\r\n    value = Number(value);\r\n    gainNode.gain.value = value\r\n}\r\n\r\n//change highShelf\r\nconst toggleHighshelf = (params: DrawParams) => {\r\n    if (params.highshelf) {\r\n        highBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime); // we created the `biquadFilter` (i.e. \"treble\") node last time\r\n        highBiquadFilter.gain.setValueAtTime(25, audioCtx.currentTime);\r\n    } else {\r\n        highBiquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n    }\r\n}\r\n\r\n//change lowShelf\r\nconst toggleLowshelf = (params: DrawParams) => {\r\n    if (params.lowshelf) {\r\n        lowBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\r\n        lowBiquadFilter.gain.setValueAtTime(15, audioCtx.currentTime);\r\n    } else {\r\n        lowBiquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n    }\r\n}\r\n\r\n//change distortion\r\nconst toggleDistortion = (params: DrawParams) => {\r\n    if (params.distortion) {\r\n        distortionFilter.curve = null; // being paranoid and trying to trigger garbage collection\r\n        distortionFilter.curve = makeDistortionCurve(params.distortionAmount);\r\n    } else {\r\n        distortionFilter.curve = null;\r\n    }\r\n}\r\n\r\n//changes based on slider\r\nconst makeDistortionCurve = (amount: number = 20) => {\r\n    let n_samples = 256, curve = new Float32Array(n_samples);\r\n    for (let i = 0; i < n_samples; ++i) {\r\n        let x = i * 2 / n_samples - 1;\r\n        curve[i] = (Math.PI + amount) * x / (Math.PI + amount * Math.abs(x));\r\n    }\r\n    return curve;\r\n}\r\n\r\n//export\r\nexport { audioCtx, setupWebaudio, playCurrentSound, pauseCurrentSound, loadSoundFile, setVolume, analyserNode, toggleHighshelf, toggleLowshelf, toggleDistortion, makeDistortionCurve };\r\n","import * as utils from './utils';\r\nimport * as triangle from './classes/Triangles';\r\nimport * as firework from './classes/Fireworks';\r\n\r\nlet ctx:CanvasRenderingContext2D, canvasWidth:number, canvasHeight:number, analyserNode: AnalyserNode, audioData: Uint8Array;\r\nlet fireworks = [];\r\nlet triangles = [];\r\n\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\n\r\nconst setupCanvas = (canvasElement: HTMLCanvasElement, analyserNodeRef: AnalyserNode) => {\r\n    if (!canvasElement) {\r\n\r\n        return;\r\n    }\r\n    // create drawing context\r\n    ctx = canvasElement.getContext(\"2d\");\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n    // keep a reference to the analyser node\r\n    analyserNode = analyserNodeRef;\r\n    // this is the array where the analyser data will be stored\r\n    audioData = new Uint8Array(analyserNode.fftSize / 2);\r\n\r\n    //push fireworks into the array\r\n    fireworks.push(new firework.FireWork(100, 100, -100))\r\n    fireworks.push(new firework.FireWork(240, 140, -60))\r\n    fireworks.push(new firework.FireWork(200, 340, 200))\r\n    fireworks.push(new firework.FireWork(450, 200, 400))\r\n    fireworks.push(new firework.FireWork(500, 100, 100))\r\n    fireworks.push(new firework.FireWork(600, 300, 900))\r\n\r\n    //push trianlges into the array\r\n    triangles.push(new triangle.Triangle(770, 20, 27))\r\n    triangles.push(new triangle.Triangle(730, 30, 20))\r\n    triangles.push(new triangle.Triangle(770, 60, 20))\r\n\r\n    triangles.push(new triangle.Triangle(30, 530, 27))\r\n    triangles.push(new triangle.Triangle(40, 490, 20))\r\n    triangles.push(new triangle.Triangle(70, 520, 20))\r\n\r\n    //console.log(triangles)\r\n\r\n}\r\n\r\nconst draw = (params: DrawParams) => {\r\n    //if no ctx\r\n    if (!ctx) {\r\n        return;\r\n    }\r\n\r\n    // 1 - populate the audioData array with the frequency data from the analyserNode\r\n    if (params.toggleWave) {\r\n        analyserNode.getByteTimeDomainData(audioData); //waveform data\r\n        // Initialize audioData with default values\r\n\r\n    } else {\r\n        analyserNode.getByteFrequencyData(audioData); //frequency data\r\n\r\n    }\r\n\r\n    // 2 - draw background\r\n    ctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = .5;\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n    //draw line\r\n    if (params.showLine) {\r\n        //line\r\n        ctx.save();\r\n        ctx.lineWidth = 3;\r\n        let x = -(canvasWidth / audioData.length);\r\n        let num = 0\r\n\r\n        //make the lines\r\n        for (let i = 0; i < 20; i++) {\r\n            ctx.lineWidth = 2;\r\n            ctx.strokeStyle = \"rgb(199, 199, 199)\";\r\n            let y = num;\r\n            num += 40\r\n            utils.makeLine(ctx, x, y, audioData, canvasWidth)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //draw bars\r\n    if (params.showBars) {\r\n\r\n        let margin = 2;\r\n        let screenWidthForBars = (canvasWidth - (audioData.length) * margin);\r\n        let barWidth = (screenWidthForBars / audioData.length) + 5;\r\n        let topSpacing = 275;\r\n\r\n        ctx.save();\r\n        //loop througbh data\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            let barX = margin + i * (barWidth + margin)\r\n            let barHeight = Math.max(audioData[i] + 20, 0);\r\n\r\n            let color = Math.round(255 * (i / (audioData.length - 50)));\r\n\r\n            ctx.fillStyle = `rgb(${color}, 10, 255, 1)`;\r\n            ctx.fillRect(barX, topSpacing + 256 - audioData[i], barWidth, barHeight);\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    //draw circles\r\n    if (params.showCircles) {\r\n        let maxRadius = canvasHeight / 20;\r\n        ctx.save();\r\n        ctx.globalAlpha = 0.5;\r\n\r\n        let x = utils.getRandom(40, canvasWidth - 40);\r\n        let y = utils.getRandom(40, canvasHeight - 40);\r\n\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            let percent = audioData[i] / 255;\r\n            let circleRadius = percent * maxRadius;\r\n\r\n            utils.makeCircle(ctx, x, y, percent, circleRadius)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //make fireworks from class\r\n    if (params.showFireworks) {\r\n\r\n        for (let f of fireworks) {\r\n            f.draw(ctx);\r\n\r\n            f.update(audioData)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //make spinning triangles from class\r\n    if (params.showTriangles) {\r\n        for (let t of triangles) {\r\n            t.draw(ctx);\r\n\r\n            t.update(audioData);\r\n        }\r\n    }\r\n\r\n\r\n    let imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n    let data = imageData.data;\r\n    let length = data.length;\r\n    // B) Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\r\n    for (let i = 0; i < length; i++) {\r\n        // C) randomly change every 20th pixel to red\r\n\r\n        //invert\r\n        if (params.showInvert) {\r\n            let red = data[i], green = data[i + 1], blue = data[i + 2];\r\n            data[i] = 255 - red; //set red\r\n            data[i + 1] = 255 - green //set green\r\n            data[i + 2] = 255 - blue //set blue\r\n            //data[1 +3] is alpha\r\n        }\r\n\r\n    } // end for\r\n\r\n    // D) copy image data back to canvas\r\n    ctx.putImageData(imageData, 0, 0);\r\n\r\n}\r\n\r\nexport { setupCanvas, draw };","export enum DEFAULTS {\r\n    sound1 = \"media/music/Nocturne.mp3\"\r\n}\r\n","//traingle class\r\nclass Triangle {\r\n    x: number;\r\n    y: number;\r\n    add: number;\r\n    rotate: number;\r\n\r\n    //constructor\r\n    constructor(x: number, y: number, add: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.add = add;\r\n        this.rotate = 0;\r\n    }\r\n    drawTriangle(ctx: CanvasRenderingContext2D, x: number, y: number, size: number, color: string) {\r\n        //make height based on the size\r\n        //baied on pythogroean theroem\r\n        let height = Math.sqrt(2 / 3) * size;\r\n\r\n        ctx.save();\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x, y - height / 2);\r\n        ctx.lineTo(x + size / 2, y + height / 2);\r\n        ctx.lineTo(x - size / 2, y + height / 2);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n    //draw the triangles\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        let color = \"rgb(180, 10, 100)\"\r\n        //tranlsate and rotate triangle\r\n        ctx.save();\r\n        ctx.translate(this.x, this.y);\r\n        ctx.rotate(this.rotate)\r\n        this.drawTriangle(ctx, 0, 0, this.add, color)\r\n        ctx.restore();\r\n\r\n    }\r\n    //rotate triangles with music\r\n    update(audioData: Uint8Array) {\r\n        let speed = 0.1;\r\n        let audioRotate = audioData[0] / 255 * speed;\r\n        this.rotate += audioRotate;\r\n\r\n        // this.rotate += speed;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { Triangle };","//mkae firework like shapes\r\nexport default class FireWork {\r\n    centerX: number;\r\n    centerY: number;\r\n    add: number;\r\n    n: number;\r\n    divergence: number;\r\n    c: number;\r\n    radius: number;\r\n\r\n    //construcor\r\n    constructor(centerX: number, centerY: number, add: number) {\r\n        this.centerX = centerX;\r\n        this.centerY = centerY;\r\n        this.add = add\r\n        this.n = 0;\r\n        this.divergence = 137.1;\r\n        this.c = 3;\r\n        this.radius = 2;\r\n    }\r\n    // calculate degrees\r\n    dtr(degrees: number) {\r\n        return degrees * (Math.PI / 180);\r\n    }\r\n    //make the circles\r\n    drawCircle(ctx: CanvasRenderingContext2D, x: number, y: number, radius: number, color: string) {\r\n        ctx.save();\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, radius, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n    //draw fireworks\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n\r\n        for (let i = 0; i < this.n; i++) {\r\n            let aFlower = i * this.dtr(137.1)\r\n            let rFlower = 2 * Math.sqrt(i);\r\n\r\n            //get X and Y\r\n            let x = rFlower * Math.cos(aFlower) + this.centerX;\r\n            let y = rFlower * Math.sin(aFlower) + this.centerY;\r\n\r\n            //draw the circles\r\n            let red = Math.round(255 * (1 - i / this.n));\r\n            let color = `rgb(${red}, 10, 100)`;\r\n            this.drawCircle(ctx, x, y, 1, color);\r\n        }\r\n\r\n    }\r\n    //add more dots with music\r\n    update(audioData: Uint8Array) {\r\n        let add = 0\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            add += audioData[i];\r\n        }\r\n        let average = add / (audioData.length + this.add);\r\n        this.n = Math.floor(1000 * (average / 200) + 10);\r\n\r\n    }\r\n}\r\n\r\nexport { FireWork };","export interface DrawParams{\r\n    showLine: boolean,\r\n    showBars: boolean,\r\n    showCircles: boolean,\r\n    showFireworks: boolean,\r\n    showTriangles: boolean,\r\n    showInvert: boolean,\r\n    highshelf: boolean,\r\n    lowshelf: boolean,\r\n    distortion: boolean,\r\n    toggleWave: boolean,\r\n    distortionAmount: number\r\n\r\n  }\r\n\r\n  //params object\r\nconst drawParams: DrawParams = {\r\n    showLine: false,\r\n    showBars: true,\r\n    showCircles: false,\r\n    showInvert: false,\r\n    showFireworks: true,\r\n    showTriangles: true,\r\n    highshelf: false,\r\n    lowshelf: false,\r\n    distortion: false,\r\n    toggleWave: false,\r\n  \r\n    //set intial distortion\r\n    distortionAmount: 20\r\n  }\r\n\r\n  export { drawParams };","//imports\r\nimport * as utils from './utils';\r\nimport * as audio from './audio';\r\nimport * as canvas from './visualizer';\r\nimport * as json from './load-json';\r\nimport * as burger from './burger';\r\n\r\nimport { drawParams } from './interfaces/drawParams.interface';\r\n\r\n//enum\r\nimport { DEFAULTS } from './enums/main-defaults.enum';\r\n\r\nconst init = () => {\r\n  audio.setupWebaudio(DEFAULTS.sound1);\r\n  console.log(\"init called\");\r\n  //console.log(`Testing utils.getRandomColor() import: ${utils.getRandomColor()}`);\r\n  let canvasElement = document.querySelector(\"canvas\"); // hookup <canvas> element\r\n  setupUI(canvasElement);\r\n\r\n  canvas.setupCanvas(canvasElement, audio.analyserNode);\r\n\r\n  json.loadJson();\r\n\r\n  burger.makeBurger();\r\n\r\n  loop();\r\n}\r\n\r\nconst setupUI = (canvasElement: HTMLCanvasElement) => {\r\n  // A - hookup fullscreen button\r\n  const fsButton = document.querySelector(\"#btn-fs\") as HTMLButtonElement;\r\n  const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\r\n\r\n  // add .onclick event to button\r\n  if (fsButton) {\r\n    fsButton.onclick = e => {\r\n      //console.log(\"goFullscreen() called\");\r\n      utils.goFullscreen(canvasElement);\r\n    };\r\n  }\r\n\r\n  //PLAY BUTTON\r\n  if (playButton) {\r\n    playButton.onclick = e => {\r\n      console.log(`audioCtx.state before = ${audio.audioCtx.state}`)\r\n\r\n\r\n      //check if in suspend state (autoplay)\r\n      if (audio.audioCtx.state == \"suspended\") {\r\n        audio.audioCtx.resume();\r\n      }\r\n      console.log(`audioCtx.state after = ${audio.audioCtx.state}`);\r\n      const target = e.target as HTMLInputElement;\r\n      if (target.dataset.playing == \"no\") {\r\n        //if currently paused, play it\r\n        audio.playCurrentSound();\r\n        target.dataset.playing = \"yes\";\r\n\r\n      } else {\r\n        audio.pauseCurrentSound();\r\n        target.dataset.playing = \"no\";\r\n      }\r\n\r\n    };\r\n  }\r\n\r\n  //VOLUME SLIDER\r\n  //get references to them\r\n  let volumeSlider = document.querySelector(\"#slider-volume\") as HTMLButtonElement;\r\n  let volumeLabel = document.querySelector(\"#label-volume\") as HTMLButtonElement;\r\n\r\n  //change on input\r\n  if (volumeSlider) {\r\n    volumeSlider.oninput = e => {\r\n      const target = e.target as HTMLInputElement;\r\n      //set gain\r\n      audio.setVolume(parseFloat(target.value));\r\n      //update value on label\r\n      volumeLabel.innerHTML = `${Math.round((parseFloat(target.value) / 2 * 100))}`;\r\n    };\r\n\r\n\r\n    //set initial\r\n    volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n  }\r\n\r\n  //TRACK SELECT\r\n  let trackSelect = document.querySelector(\"#select-track\") as HTMLButtonElement;\r\n  //onchange event\r\n  if (trackSelect) {\r\n    trackSelect.onchange = e => {\r\n      const target = e.target as HTMLInputElement;\r\n      audio.loadSoundFile(target.value);\r\n      //pause current if playing\r\n      if (playButton.dataset.playing == \"yes\") {\r\n        playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n      }\r\n    };\r\n  }\r\n\r\n  //CHECKBOX EVENTS\r\n  //reference from html\r\n  let lineCheck = document.querySelector(\"#cb-lines\") as HTMLInputElement;\r\n  let fireCheck = document.querySelector(\"#cb-fireworks\") as HTMLInputElement;\r\n  let triCheck = document.querySelector(\"#cb-triangles\") as HTMLInputElement;\r\n  let barCheck = document.querySelector(\"#cb-bars\") as HTMLInputElement;\r\n  let circleCheck = document.querySelector(\"#cb-circles\") as HTMLInputElement;\r\n  let invCheck = document.querySelector(\"#cb-invert\") as HTMLInputElement;\r\n\r\n  //start them checked\r\n  if (barCheck) {\r\n    barCheck.checked = true;\r\n  }\r\n\r\n  if (fireCheck) {\r\n    fireCheck.checked = true;\r\n  }\r\n\r\n  if (triCheck) {\r\n    triCheck.checked = true;\r\n  }\r\n  //line\r\n  if (lineCheck) {\r\n    lineCheck.onclick = () => {\r\n      if (lineCheck.checked) {\r\n        drawParams.showLine = true;\r\n      } else {\r\n        drawParams.showLine = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  //bars\r\n  if (barCheck) {\r\n    barCheck.onclick = () => {\r\n      if (barCheck.checked) {\r\n        drawParams.showBars = true;\r\n      } else {\r\n        drawParams.showBars = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  //circles\r\n  if (circleCheck) {\r\n    circleCheck.onclick = () => {\r\n      if (circleCheck.checked) {\r\n        drawParams.showCircles = true;\r\n      } else {\r\n        drawParams.showCircles = false;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  //invert\r\n  if (invCheck) {\r\n    invCheck.onclick = () => {\r\n      if (invCheck.checked) {\r\n        drawParams.showInvert = true;\r\n      } else {\r\n        drawParams.showInvert = false;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  //fireworks\r\n  if (fireCheck) {\r\n    fireCheck.onclick = () => {\r\n      if (fireCheck.checked) {\r\n        drawParams.showFireworks = true;\r\n      } else {\r\n        drawParams.showFireworks = false;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  //triangles\r\n  if (triCheck) {\r\n    triCheck.onclick = () => {\r\n      if (triCheck.checked) {\r\n        drawParams.showTriangles = true;\r\n      } else {\r\n        drawParams.showTriangles = false;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n  //SOUND FILTERS\r\n  let highCheck = document.querySelector('#cb-highshelf') as HTMLInputElement;\r\n  let lowsCheck = document.querySelector('#cb-lowshelf') as HTMLInputElement;\r\n  let distCheck = document.querySelector('#cb-distortion') as HTMLInputElement;\r\n  let sliderDist = document.querySelector('#slider-distortion') as HTMLInputElement;\r\n  let selectVis = document.querySelector('#select-visualizer') as HTMLInputElement;\r\n\r\n  if (highCheck) {\r\n    highCheck.checked = drawParams.highshelf;\r\n\r\n    highCheck.onchange = e => {\r\n      const target = e.target as HTMLInputElement;\r\n      drawParams.highshelf = target.checked;\r\n      audio.toggleHighshelf(drawParams);\r\n    };\r\n  }\r\n\r\n  if (lowsCheck) {\r\n    lowsCheck.checked = drawParams.lowshelf;\r\n\r\n    lowsCheck.onchange = e => {\r\n      const target = e.target as HTMLInputElement;\r\n      drawParams.lowshelf = target.checked;\r\n      audio.toggleLowshelf(drawParams);\r\n    };\r\n  }\r\n\r\n  if (distCheck) {\r\n    distCheck.checked = drawParams.distortion;\r\n\r\n    distCheck.onchange = e => {\r\n      const target = e.target as HTMLInputElement;\r\n      drawParams.distortion = target.checked;\r\n      audio.toggleDistortion(drawParams);\r\n    };\r\n  }\r\n\r\n  if (sliderDist) {\r\n    sliderDist.value = drawParams.distortionAmount.toString();\r\n    sliderDist.onchange = e => {\r\n      const target = e.target as HTMLInputElement;\r\n      drawParams.distortionAmount = Number(target.value);\r\n      audio.toggleDistortion(drawParams);\r\n    };\r\n\r\n  }\r\n\r\n  //TOGGLE VISUALIZATION\r\n  if (selectVis) {\r\n    selectVis.onchange = e => {\r\n      const target = e.target as HTMLInputElement;\r\n      if (target.value == \"frequency\") {\r\n        drawParams.toggleWave = false;\r\n      } else {\r\n        drawParams.toggleWave = true;\r\n      }\r\n    }\r\n  }\r\n\r\n} // end setupUI\r\n\r\n//DATA VISULIZER\r\nconst loop = () => {\r\n  let fps: number = 60;\r\n  canvas.draw(drawParams);\r\n  setTimeout(loop, 1000/fps);\r\n\r\n}\r\n\r\nexport { init };","const loadJson = () => {\r\n    const url = \"data/av-data.json\";\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.onload = (e) => {\r\n        //console.log(`In onload - HTTP Status Code = ${e.target.status}`);\r\n\r\n        let json;\r\n        try {\r\n            json = JSON.parse(xhr.responseText)\r\n        } catch {\r\n            document.querySelector(\"#output\").innerHTML = \"BAD JSON\";\r\n            return;\r\n        }\r\n\r\n        const obj = json\r\n\r\n        let html = \"\";\r\n\r\n        html += `<h2>${obj.title = obj.title ? obj.title : \"No title found\"}</h2>`;\r\n        html += `<ol>${obj[\"songlist\"].map(w => `<li>${w}</li>`).join(\"\")}</ol>`;\r\n        html += `<p>${obj.instructions}</p>`\r\n\r\n        //for title of app\r\n        const titleElement = document.querySelector(\"title\");\r\n        if (titleElement) {\r\n            titleElement.innerHTML = obj.title;\r\n        }\r\n\r\n        //for inside the info\r\n        const outputElement = document.querySelector(\"#output\");\r\n        if (outputElement) {\r\n            outputElement.innerHTML = html;\r\n        }\r\n    }\r\n    xhr.onerror = e => console.log(`In onerror - HTTP Status Code = ${xhr.status}`)\r\n    xhr.open(\"GET\", url)\r\n    xhr.send();\r\n\r\n}\r\n\r\nexport { loadJson };","//make the burger work\r\nconst makeBurger = () => {\r\n    const burgerIcon = document.querySelector('#burger');\r\n    const navbarMenu = document.querySelector('#nav-links');\r\n\r\n    burgerIcon.addEventListener('click', () => {\r\n        navbarMenu.classList.toggle('is-active');\r\n    })\r\n\r\n   // console.log(\"is it working\")\r\n\r\n}\r\n\r\n\r\nexport { makeBurger };","import * as main from './main';\r\n\r\n//load canvas\r\nmain.init();"],"names":["DEFAULTS","audioCtx","sourceNode","analyserNode","gainNode","distortionFilter","highBiquadFilter","lowBiquadFilter","getRandom","min","max","Math","random","makeLine","ctx","x","y","audioData","canvasWidth","beginPath","moveTo","i","length","value","lineTo","stroke","closePath","restore","makeCircle","percent","radius","alpha","fillStyle","arc","PI","fill","canvasHeight","loadSoundFile","filePath","src","toggleDistortion","params","distortion","curve","makeDistortionCurve","distortionAmount","amount","Float32Array","abs","add","this","rotate","drawTriangle","size","color","height","sqrt","save","draw","translate","update","audioRotate","centerX","centerY","n","divergence","c","dtr","degrees","drawCircle","aFlower","rFlower","cos","sin","red","round","average","floor","fireworks","triangles","drawParams","showLine","showBars","showCircles","showInvert","showFireworks","showTriangles","highshelf","lowshelf","toggleWave","loop","getByteTimeDomainData","getByteFrequencyData","globalAlpha","fillRect","lineWidth","num","strokeStyle","barWidth","barX","barHeight","topSpacing","maxRadius","f","t","imageData","getImageData","data","green","blue","putImageData","setTimeout","AudioContext","sound1","window","Audio","createMediaElementSource","createAnalyser","fftSize","numSamples","createGain","gain","createBiquadFilter","type","createWaveShaper","connect","destination","console","log","xhr","burgerIcon","navbarMenu","canvasElement","document","querySelector","fsButton","playButton","onclick","e","element","requestFullscreen","mozRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","state","resume","target","dataset","playing","play","pause","volumeSlider","volumeLabel","oninput","parseFloat","Number","innerHTML","dispatchEvent","Event","trackSelect","onchange","MouseEvent","lineCheck","fireCheck","triCheck","barCheck","circleCheck","invCheck","checked","highCheck","lowsCheck","distCheck","sliderDist","selectVis","frequency","setValueAtTime","currentTime","toString","setupUI","analyserNodeRef","getContext","width","Uint8Array","push","XMLHttpRequest","onload","json","JSON","parse","responseText","obj","html","title","map","w","join","instructions","titleElement","outputElement","onerror","status","open","send","addEventListener","classList","toggle"],"sourceRoot":""}